<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<context:component-scan base-package="org.activiti.conf,org.activiti.rest.editor,org.activiti.rest.service">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 单例json对象 -->
	<bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper" />

	<!-- 引擎内部提供的UUID生成器，依赖fastxml的java-uuid-generator模块 -->
	<bean id="uuidGenerator" class="org.activiti.engine.impl.persistence.StrongUuidGenerator" />

	<!-- Activiti begin -->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<!--定时类型的流程开关 -->
		<property name="jobExecutorActivate" value="false" />
		<property name="processDefinitionCacheLimit" value="10" />

		<!-- databaseSchemaUpdate：允许在流程引擎启动和关闭时设置处理数据库模式的策略。  false（默认）：创建流程引擎时检查数据库模式的版本是否与函数库要求的匹配，如果版本不匹配就会抛出异常。 
			true：构建流程引擎时，执行检查，如果有必要会更新数据库模式。如果数据库模式不存在，就创建一个。 create - 引擎启动时创建表； create-drop：创建流程引擎时创建数据库模式，关闭流程引擎时删除数据库模式。 
			drop-create - 引擎启动时先删除表再重新创建表。 -->
		<property name="databaseSchemaUpdate" value="true" />

		<!-- mail -->
		<property name="mailServerHost" value="localhost" />
		<property name="mailServerUsername" value="kafeitu" />
		<property name="mailServerPassword" value="000000" />
		<property name="mailServerPort" value="2025" />

		<!-- UUID作为主键生成策略
		<property name="idGenerator" ref="uuidGenerator" />
		 -->

		<!-- 生成流程图的字体 -->
		<property name="activityFontName" value="宋体" />
		<property name="labelFontName" value="宋体" />

		<!-- 自动部署 -->
		<property name="deploymentResources">
			<list>
				<value>classpath*:/deployments/*</value>
			</list>
		</property>

		<!-- 全局事件 -->
		<property name="typedEventListeners">
			<map>
				<entry key="VARIABLE_CREATED">
					<list>
						<ref bean="variableCreateListener" />
					</list>
				</entry>
			</map>
		</property>
	</bean>

	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>

	<!-- 7大接口 -->
	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
	<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />
	<bean id="formService" factory-bean="processEngine" factory-method="getFormService" />
	<bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService" />
	<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
	<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />
	<bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />

	<!-- 集成REST服务需要的bean -->
	<bean id="restResponseFactory" class="org.activiti.rest.service.api.RestResponseFactory" />
	<bean id="contentTypeResolver" class="org.activiti.rest.common.application.DefaultContentTypeResolver" />
</beans>
